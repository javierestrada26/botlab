import { addKeyword, EVENTS } from "@builderbot/bot";
//import dateFlow from "./date.flow.js";
import { mainMenuFlow } from "./welcome.flow.js";

//import examenesPdfFlow from "./examenPdf.flow.js";

// Funci√≥n para obtener el mensaje de recomendaci√≥n
const getRecommendationMessage = (option) => {
    switch(option) {
        case '1':
            return "ü©∏ *RECOMENDACIONES PARA EX√ÅMENES DE SANGRE*\n\n" +
                "üïê *Ayuno:*\n" +
                "‚Ä¢ Si le indicaron ayuno, evite alimentos s√≥lidos entre 8 y 12 horas antes.\n\n" +
                "üíß *Hidrataci√≥n:*\n" +
                "‚Ä¢ Puede tomar agua durante el ayuno\n" +
                "‚Ä¢ Evite bebidas azucaradas o con cafe√≠na";
                
        case '2':
            return "üß™ *RECOLECCI√ìN DE MUESTRA DE ORINA*\n\n" +
                "üïê *Cu√°ndo recogerla:*\n" +
                "‚Ä¢ Preferiblemente la primera orina de la ma√±ana\n\n" +
                "üßº *Preparaci√≥n:*\n" +
                "1. L√°vese bien las manos\n" +
                "2. Limpie la zona genital con agua y jab√≥n\n" +
                "3. Enjuague y seque con toalla limpia\n\n" +
                "üß™ *Recolecci√≥n:*\n" +
                "1. Orine un poco en el inodoro (descartar primer chorro)\n" +
                "2. Recoja el chorro medio en el frasco est√©ril\n" +
                "3. Llene ¬æ del frasco\n" +
                "4. Entregue en menos de 2 horas o refrigere (m√°x. 4 horas)";
                
        case '3':
            return "üí© *RECOLECCI√ìN DE MUESTRA DE HECES*\n\n" +
                "üßº *Preparaci√≥n:*\n" +
                "1. L√°vese bien las manos\n" +
                "2. Orine antes de evacuar (evitar contaminaci√≥n)\n\n" +
                "üß™ *Recolecci√≥n:*\n" +
                "1. Defeque en recipiente limpio y seco\n" +
                "2. Tome muestra del tama√±o de una nuez con la paleta\n" +
                "3. Incluya partes l√≠quidas, mucosidad o sangre si las hay\n" +
                "4. Cierre bien el frasco\n" +
                "5. Entregue en 1-2 horas o refrigere (m√°x. 12 horas)\n\n" +
                "‚ö†Ô∏è *No mezcle con orina, agua ni papel higi√©nico*";
                
        case '4':
            return "üíä *RECOMENDACIONES SOBRE MEDICAMENTOS*\n\n" +
                "‚Ä¢ Consulte con su m√©dico si debe suspender alg√∫n medicamento\n" +
                "‚Ä¢ Traiga lista completa de medicamentos actuales\n" +
                "‚Ä¢ No suspenda medicamentos sin autorizaci√≥n m√©dica";
                
        case '5':
            return "üìÑ *DOCUMENTOS NECESARIOS*\n\n" +
                "‚Ä¢ Traiga su c√©dula de identidad\n" +
                "‚Ä¢ Orden m√©dica (si aplica)\n" +
                "‚Ä¢ Carnet del seguro (si tiene)\n" +
                "‚Ä¢ Resultados de ex√°menes anteriores (si es seguimiento)";
                
        default:
            return null;
    }
};

const recomendacionesFlow = addKeyword(EVENTS.ACTION)
    .addAnswer(
        "üìã *RECOMENDACIONES PARA EX√ÅMENES* üìã\n\n" +
        "Seleccione el tipo de recomendaci√≥n que necesita:\n\n" +
        "*1* ü©∏ Sangre\n" +
        "*2* üß™ Orina\n" +
        "*3* üí© Heces\n" +
        "*4* üíä Medicamentos\n" +
        "*5* üìÑ Documentos\n\n" +
        "Escriba el n√∫mero de su opci√≥n:",
        { capture: true },
        async (ctx, ctxFn) => {
            const userResponse = ctx.body.trim();
            const responseMessage = getRecommendationMessage(userResponse);
            
            if (responseMessage) {
                await ctxFn.flowDynamic(responseMessage);
            } else {
                return ctxFn.flowDynamic(
                    "‚ùå Opci√≥n no v√°lida. Por favor seleccione:\n\n" +
                    "*1* ü©∏ Sangre\n" +
                    "*2* üß™ Orina\n" +
                    "*3* üí© Heces\n" +
                    "*4* üíä Medicamentos\n" +
                    "*5* üìÑ Documentos"
                );
            }
        }
    )
    .addAnswer(
        "\n¬øDesea consultar otra recomendaci√≥n?\n\n" +
        "*1* ‚úÖ S√≠, ver m√°s recomendaciones\n" +
        "*2* ‚ùå No, ir al men√∫ principal\n\n" +
        "Escriba su opci√≥n:",
        { capture: true },
        async (ctx, ctxFn) => {
            const userResponse = ctx.body.trim();
            
            if (userResponse === '1') {
                // Reiniciar el flujo de recomendaciones
                return ctxFn.gotoFlow(recomendacionesFlow);
            } else if (userResponse === '2') {
                return ctxFn.gotoFlow(mainMenuFlow);
            } else {
                return ctxFn.flowDynamic(
                    "‚ùå Opci√≥n no v√°lida. Por favor escriba:\n" +
                    "*1* para ver m√°s recomendaciones\n" +
                    "*2* para ir al men√∫ principal"
                );
            }
        }
    );

export default recomendacionesFlow;